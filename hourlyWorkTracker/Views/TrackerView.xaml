<Window x:Class="hourlyWorkTracker.Views.TrackerView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:shell="http://schemas.microsoft.com/netfx/2009/xaml/presentation"
        xmlns:local="clr-namespace:hourlyWorkTracker"
        xmlns:vm="clr-namespace:hourlyWorkTracker.ViewModels"
        xmlns:view="clr-namespace:hourlyWorkTracker.Views"
        mc:Ignorable="d" Height="{Binding Path=TrackerHeight, Mode=TwoWay}" Width="{Binding TrackerWidth, Mode=TwoWay}" AllowsTransparency="True" ResizeMode="CanResize"
        WindowStyle="None" Opacity="{Binding MyApplicationBehavior.Opacity}" x:Name="HWTTrackerWindow"
        MouseDown="clickedWindow">
    <Window.DataContext>
        <vm:ApplicationBehaviorViewModel/>
    </Window.DataContext>
    <Window.Resources>
        <!--The correct way to do this is to create a ViewModel for each View and pass data back and forth from ViewModel
        to ViewModel, create Data Templates at the App level for your ViewModels to represent Views when you bind them
        to the content of new windows etc.  I just haven't QUITE figured it all out.  So I'm doing this instead.-->
        <view:ConfigureView x:Key="ConfigureView"/>
        <Style TargetType="Grid">
            <Setter Property="Background" Value="{Binding Path=MyApplicationBehavior.GridBackground, Converter={StaticResource CTBC}}"/>
        </Style>
        <Style TargetType="Rectangle">
            <Setter Property="Fill" Value="{Binding Path=MyApplicationBehavior.RectangleFill, Converter={StaticResource CTBC}}"/>
        </Style>
        <Style TargetType="Button">
            <Setter Property="Background" Value="{Binding Path=MyApplicationBehavior.ButtonBackground, Converter={StaticResource CTBC}}"/>
            <Setter Property="FontWeight" Value="Bold"/>
        </Style>
        <Style TargetType="TextBlock" x:Key="Ticker">
            <Setter Property="Foreground" Value="{Binding Path=MyApplicationBehavior.TickerForeground, Converter={StaticResource CTBC}}"/>
            <Setter Property="FontWeight" Value="Bold"/>
        </Style>
        <Style TargetType="TextBlock" x:Key="ButtonText">
            <Setter Property="Foreground" Value="{Binding MyApplicationBehavior.ButtonTextForeground, Converter={StaticResource CTBC}}"/>
        </Style>
    </Window.Resources>
    <Window.ContextMenu>
        <ContextMenu StaysOpen="True">
            <MenuItem Header="Configure" Command="{Binding OpenConfigureWindow}"/>
            <MenuItem Header="Close" Command="{Binding CloseWindow}"
                      CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget}"/>
        </ContextMenu>
    </Window.ContextMenu>
    <!--Makes window able to be resized-->
    <shell:WindowChrome.WindowChrome>
        <shell:WindowChrome CaptionHeight="0" ResizeBorderThickness="7"/>
    </shell:WindowChrome.WindowChrome>
    <Border BorderBrush="{Binding MyApplicationBehavior.RectangleFill, Converter={StaticResource CTBC}}"
            BorderThickness="8">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="5*"/>
                <RowDefinition Height="2*"/>
                <RowDefinition Height="4*"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="2*"/>
                <ColumnDefinition Width="3*"/>
                <ColumnDefinition Width="3*"/>
                <ColumnDefinition Width="2*"/>
            </Grid.ColumnDefinitions>
            <Viewbox Margin="60" Grid.Row="0" Grid.Column="0">
                <TextBlock Style="{StaticResource Ticker}">$</TextBlock>
            </Viewbox>
            <Viewbox Margin="60" Grid.Row="0" Grid.Column="3">
                <TextBlock Style="{StaticResource Ticker}">$</TextBlock>
            </Viewbox>
            <Viewbox Margin="40" Grid.Row="2" Grid.Column="0">
                <TextBlock Style="{StaticResource Ticker}">$</TextBlock>
            </Viewbox>
            <Viewbox Margin="40" Grid.Row="2" Grid.Column="3">
                <TextBlock Style="{StaticResource Ticker}">$</TextBlock>
            </Viewbox>
            <Viewbox Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="2" Margin="0,44,0,0"
                         HorizontalAlignment="Center" VerticalAlignment="Center">
                <TextBlock Style="{StaticResource Ticker}" Text="{Binding MyApplicationBehavior.MoneyMadeThisSession, Converter={StaticResource MF}}"></TextBlock>
            </Viewbox>
            <Viewbox Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2" Margin="0,1,0,0"
                         HorizontalAlignment="Center" VerticalAlignment="Center">
                <TextBlock Style="{StaticResource Ticker}" Text="{Binding MyApplicationBehavior.TotalMoneyMade, Converter={StaticResource MF}}"></TextBlock>
            </Viewbox>
            <Button Grid.Row="2" Grid.Column="1" Margin="30,25,10,48" Command="{Binding StartStopTracker}">
                <Viewbox Margin="5,5,5,6">
                    <TextBlock Style="{StaticResource ButtonText}" Text="{Binding MyApplicationBehavior.StartStopButtonText}"></TextBlock>
                </Viewbox>
            </Button>
            <Button Grid.Row="2" Grid.Column="2" Margin="10,25,30,48" Command="{Binding ResetAndStore}">
                <Viewbox Margin="3,0,3,0">
                    <TextBlock Style="{StaticResource ButtonText}" TextAlignment="Center" LineStackingStrategy="BlockLineHeight"
                                   LineHeight="11">Reset+Store<LineBreak/>Session</TextBlock>
                </Viewbox>
            </Button>
        </Grid>
    </Border>
</Window>
